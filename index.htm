<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=0.8"> 
    <title>Fairchild Channel F Video Entertainment System (VES) Emulator from 1976</title>
    <style>
      .monospace {
        font-family: monaco,monospace;
      }
      
      h1 { font-size:23px; margin: 0; }
      
      td { text-align: center; white-space: nowrap; }
      th { white-space: nowrap; }

      th { user-select: none }
      
      #registers { font-size: 1vw }
      
      #buttons th { border: 1px solid black; }

      button { font-size: 30px; cursor: pointer; }
      
      table.button-inner { font-size: 18px;}
      table.button-inner td { border-top: 1px solid black }
      table.button-inner tr:first-child > td { border-top: none; }
        
      .red {
        color: red;
      }
      
      .led {
        border-radius: 5px
      }
      
      .red {
        color: red;
      }
      
      .desktoponly {display:display;}

      @media only screen and (max-width: 1000px) {
      .desktoponly {display:none;}
      .main_flex {flex-direction: column}
      }
      
      
      #numpad {
          display: grid;
          grid-template-columns: repeat(4, 1fr);
          gap: 5px;
          max-width: 300px;
      }

      .button.double-height {
          grid-row: span 2;
      }
      .button.double-width {
          grid-column: span 2;
      }
      .button.square {
        aspect-ratio: 1/1;
      }
      .button.hidden {
        visibility: hidden;
      }
    </style>
    <script type="module">
      import init from "./pkg/fairchild_ves.js";
      const wasm = await init();
      wasm.run();
    </script>
    
    <script>
      let pendingButtons = [];
      let pendingMove = [false];
      let pendingWheel = 0;
      
      let isMouseCaptured = false;
      function handlePointerLockChange() {
        isMouseCaptured = !isMouseCaptured;

        if (isMouseCaptured) {
          document.addEventListener('mousemove', handleMouseMove);
          document.addEventListener('wheel', handleMouseWheel);
          document.addEventListener('mousedown', handleMouseDown);
          document.addEventListener('mouseup', handleMouseUp);
        } else {
          document.removeEventListener('mousemove', handleMouseMove);
          document.removeEventListener('wheel', handleMouseWheel);
          document.removeEventListener('mousedown', handleMouseDown);
          document.removeEventListener('mouseup', handleMouseUp);
        }
      }
      function handleMouseMove(event) { //Overwrite old x, y positions. We only care about the latest one.
        pendingMove = [event.movementX, event.movementY];
      }
      function handleMouseWheel(event) {
        pendingWheel = event.deltaY;
      }
      function handleMouseDown(event) { //Overwrite old x, y positions. We only care about the latest one.
        if (event.button === 0) { //Left mouse button
          pendingButtons.push([5, 1]);
        } else if (event.button === 2) {  //Right mouse button
          pendingButtons.push([6, 1]);
        }
      }
      function handleMouseUp(event) {
        if (event.button === 0) { //Left mouse button
          pendingButtons.push([5, 2]);
        } else if (event.button === 2) {  //Right mouse button
          pendingButtons.push([6, 2]);
        }
      }

      document.addEventListener('pointerlockchange', handlePointerLockChange);
      
      //Map out all of the button clicks.
      window.addEventListener("load", function() {
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        canvas.addEventListener('click', () => {
          if (!isMouseCaptured) {
            canvas.requestPointerLock();
          }
        });
        
        const console = document.getElementById("console");
        for(let i = 0; i < console.children.length; i++) {
          const button = console.children[i];
          if (button.hasAttribute("code")) {
            const code = parseInt(button.getAttribute('code'));
            button.addEventListener("mousedown", function(e) {
              pendingButtons.push([code, 1]);
            });
            button.addEventListener("touchstart", function(e) {
              pendingButtons.push([code, 1]);
            });
            button.addEventListener("mouseup", function(e) {
              pendingButtons.push([code, 2]);
            });
            button.addEventListener("touchend", function(e) {
              pendingButtons.push([code, 2]);
            });
          }
        }
        const buttons = document.getElementById("numpad");
        for(let i = 0; i < buttons.children.length; i++) {
          const button = buttons.children[i];
          if (button.hasAttribute("code")) {
            const code = parseInt(button.getAttribute('code'));
            button.addEventListener("mousedown", function(e) {
              pendingButtons.push([code, 1]);
            });
            button.addEventListener("touchstart", function(e) {
              pendingButtons.push([code, 1]);
            });
            button.addEventListener("mouseup", function(e) {
              pendingButtons.push([code, 2]);
            });
            button.addEventListener("touchend", function(e) {
              pendingButtons.push([code, 2]);
            });
          }
        }
      });
      
      // Mapping object for key codes to button values
      const keyMap = {
        115: 4, // F4
        114: 3, // F3
        113: 2, // F2
        112: 1, // F1
        45: 5,  // 0/insert
        96: 5,  // 0/insert (Numpad 0)
        46: 6,  // ./del
        110: 6, // ./del (Numpad .)
        37: 7,  // left
        100: 7, // left (Numpad 4)
        39: 8,  // right
        102: 8, // right (Numpad 6)
        38: 9,  // up
        104: 9, // up (Numpad 8)
        40: 10,  // down
        98: 10, // down (Numpad 2)
        107: 11,  // +
        13: 12, // enter
      };
      
      document.onkeydown = function (e) {
        e = e || window.event;
        const buttonValue = keyMap[e.keyCode];
        if (buttonValue !== undefined) {
          pendingButtons.push([buttonValue, 1]);
          e.preventDefault();
        }
      };

      document.onkeyup = function (e) {
        e = e || window.event;
        const buttonValue = keyMap[e.keyCode];
        if (buttonValue !== undefined) {
          pendingButtons.push([buttonValue, 2]);
          e.preventDefault();
        }
      };
      
      //This function will be called by the WASM code.
      function getPendingButton() {
        let pending = pendingButtons.shift();
        if(pending) {
          return pending;
        }
      }
      
      //This function will be called by the WASM code.
      function getPendingMove() {
        let pending = pendingMove;
        pendingMove = [false];
        return pending;
      }
      
      function getPendingWheel() {
        let pending = pendingWheel;
        pendingWheel = 0;
        return pending;
      }
    </script>
    
  </head>
  <body>
  <div style="display: flex" class="main_flex">
    <aside class="monospace desktoponly">
    <table id="registers">
      <caption>Scratchpad Registers</caption>
      <tr><th>          </th><td style="width:5px"> </td><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr>
      <tr><th>R0</th><td> </td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td></tr>
      <tr><th>R1</th><td> </td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td></tr>
      <tr><th>R2</th><td> </td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td></tr>
      <tr><th>R3</th><td> </td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td><td>00</td></tr>
      <tr><th style="height:15px"></th></tr>
    </table>
    </aside>
    <article style="flex: 1; display:flex; flex-direction: column; align-items: center; padding-right: 20px">
      <h1>Fairchild Channel F Video Entertainment System</h1>
      <div>
        <canvas id="canvas" width="515" height="348" style="border:1px solid black; background-color: black"></canvas>
      </div>
      <div style="display:flex;flex-direction: row;" id="console">
        <button code="255" style="font-size:18px;">Reset</button>
        <button code="1"><table class="button-inner"><tr><td>Time</td></tr><tr><td>2 Min</td></tr><tr><td>1</td></tr><tr><td>Hockey</td></tr></table></button>
        <button code="2"><table class="button-inner"><tr><td>Mode</td></tr><tr><td>5 Min</td></tr><tr><td>2</td></tr><tr><td>Tennis</td></tr></table></button>
        <button code="3"><table class="button-inner"><tr><td>Hold</td></tr><tr><td>10 Min</td></tr><tr><td>3</td></tr><tr><td>Game 3</td></tr></table></button>
        <button code="4"><table class="button-inner"><tr><td>Start</td></tr><tr><td>20 Min</td></tr><tr><td>4</td></tr><tr><td>Game 4</td></tr></table></button>
        <table class="button-inner"><tr><td>S? Select</td></tr><tr><td>T? Time Limit</td></tr><tr><td>M? Speed</td></tr><tr><td>G? Pick Game</td></tr></table>
      </div>
      <div>
        (Keyboard: F1, F2, F3, F4)
      </div>

    </article>
    <aside style="flex: 1">
      <center>
        <h4>Use the Mouse or Keyboard Numpad</h4>
        <div id="numpad">
            <div class="button hidden"></div>
            <button class="button square" code="9">&uarr;</button>
            <div class="button hidden"></div>
            <button class="button double-height" code="11">&#8635;</button>
            
            <button class="button square" code="7">&larr;</button>
            <div class="button hidden"></div>
            <button class="button square" code="8">&rarr;</button>
            
            <div class="button hidden"></div>
            <button class="button square" code="10">&darr;</button>
            <div class="button hidden"></div>
            <button class="button double-height" code="12">&#8634;</button>
            
            <button class="button double-width" code="5">Push</button>
            <button class="button square" code="6">Pull</button>
        </div>
      </center>

      <h4>What is this?</h4>
      This is an emulation of the <a href="https://en.wikipedia.org/wiki/Fairchild_Channel_F">Fairchild Channel F</a>, the world's first video game console to use ROM cartridges. Released in 1976. It was had an unusual chip design, dividing the CPU into two separate chips. The 3850 CPU and the 3851 PSU (Program Storage Unit). The PSU contained the Boot ROM, but also contained code and data registers. It's almost as if the PSU was an iterator, rather than an array. The CPU asked for the next data rather than holding onto an index.

      <h4>Source code</h4>

      It is my dream to build a chip library for anyone to be able to emulate any chip or board. Therefore, the code is subdivided into several layers of emulation:<br />
      
      <ul>
        <li><a href="https://github.com/veniamin-ilmer/fairchild_ves">Fairchild VES GUI</a></li>
        <li><a href="https://github.com/veniamin-ilmer/boards">Boards library</a></li>
        <li><a href="https://github.com/veniamin-ilmer/chips">Chips library</a></li>
      </ul>

      <h4>Acknowledgments / Resources</h4>
      This emulation would be lacking without the resources below:<br />
      <ul>
        <li><a href="https://channelf.se/veswiki/index.php?title=Main_Page">e5frog's Channel F VES Wiki</a></li>
        <li><a href="http://seanriddle.com/chanf.html">Sean Riddle's Channel F page</a></li>
      </ul>
    </aside>
  </div>
  
  </body>
</html>
